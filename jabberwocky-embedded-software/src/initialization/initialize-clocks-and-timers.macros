
.macro	setup_watchdog_timer
	@ setup watchdog timer
@	set_bit_in_system_controller_register	bit=#15, register=WDT, register_offset=Watchdog_Timer_Mode_Register_offset
	@ldr	r0, =32
	ldr	r0, =1024
	mov	r1, r0	@ load wdv with counter value
	add	r1, r1, r0, lsl #16	@ load wdd with counter value
	ldr	r0, =bit00
	add	r1, r1, r0, lsl #28 @ halt wdt in debug mode
	add	r1, r1, r0, lsl #29	@ halt wdt in idle mode
	add	r1, r1, r0, lsl #15	@ disable wdt
	@add	r1, r1, r0, lsl #13	@ enable wdt reset
	@add	r1, r1, r0, lsl #12	@ enable wdt fault or underflow interrupt
	@add	r1, r1, r0, lsl #14	@ wdt reset resets just the processor (as opposed to the everything reset)
	ldr	r0, =WDT
	str	r1, [r0, #Watchdog_Timer_Mode_Register_offset]
	@ the wdt mode register can only be written once and the sam-ba program does that, so this will have to be tested when we go to flash
.endm

.macro	setup_peripheral_clocks
	@ turn on peripheral clocks:
	@ see atmel at91sam7s pdf page 34 (peripheral identifiers)
	@ see atmel at91sam7a3 pdf page 29 (peripheral identifiers)
	ldr	r1, =0
	ldr	r0, =bit00
	.if	need_PIOA
		add	r1, r1, r0, lsl #PIOA_peripheral_number	@ enable pio a clock
	.endif
	.if	need_PIOB
		add	r1, r1, r0, lsl #PIOB_peripheral_number	@ enable pio b clock
	.endif
	.if	need_TWI
		add	r1, r1, r0, lsl #TWI_peripheral_number	@ enable twi clock
	.endif
	.if	need_SPI
		add	r1, r1, r0, lsl #SPI_peripheral_number	@ enable spi clock
	.endif
	.if	need_TC0
		add	r1, r1, r0, lsl #TC0_peripheral_number	@ enable timer counter 0 clock
	.endif
	.if	need_TC1
		add	r1, r1, r0, lsl #TC1_peripheral_number	@ enable timer counter 1 clock
	.endif
	.if	need_TC2
		add	r1, r1, r0, lsl #TC2_peripheral_number	@ enable timer counter 2 clock
	.endif
	.if	need_TC3
		add	r1, r1, r0, lsl #TC3_peripheral_number	@ enable timer counter 3 clock
	.endif
	ldr	r0, =PMC
	str	r1, [r0, #PMC_Peripheral_Clock_Enable_Register_offset]
@		ldr	r1, =0x23452345
@		debug	r1
@		ldr	r1, [r0, #PMC_Peripheral_Clock_Status_Register_offset]
@		debug	r1
.endm

.macro	setup_main_oscillator
	@ setup main oscillator:
	ldr	r0, =bit00
	ldr	r1, =0
	.if	use_crystal
		add	r1, r1, r0, lsl #0	@ enable main oscillator
	.endif
	.if	use_external_oscillator
		add	r1, r1, r0, lsl #1	@ bypass main oscillator (to allow an external oscillator to drive xin)
	.endif
	ldr	r0, =255	@ oscount = 8*# of slow clock cycles in 1.4 ms (for a 16-20 MHz crystal) - this seems inconsistent
	@ it's 8 bits, which means at most we can have 31.875 slow clock cycles, which is just over 1ms
	@ but the datasheet specifies 14.5ms for a 3MHz crystal
	add	r1, r1, r0, lsl #8
	ldr	r0, =PMC
	str	r1, [r0, #PMC_Clock_Generator_Main_Oscillator_Register_offset]
.endm

.macro	setup_pll
@	ldr	r0, =bit00
	ldr	r1, =0b111111<<8	@ pllcount
	add	r1, r1, #1<<log_base_2_of_pll_divisor	@ div
	ldr	r0, =pll_multiplier<<16	@ mul
	add	r1, r1, r0
	ldr	r0, =PMC
	str	r1, [r0, #PMC_Clock_Generator_PLL_Register_offset]
.endm

.macro	wait_for_mckrdy	temporary_register
	@ this requires r0 to be =PMC
	@ this destroys the flags
1:	@ wait for master clock to settle (~1.4 ms)
	ldr	\temporary_register, [r0, #PMC_Status_Register_offset]
	tst	\temporary_register, #0b1000	@ master clock ready bit
	bEQ	1b
.endm

@ notes:
@ the main clock is derived from the external crystal or oscillator
@ the master clock is either the {rc (slow) clock, the main clock or the pll clock} divided by the prescaling factor
@ the pll clock is the main clock * (mul+1)/div
@ the prescaling happens before the "master"ness so that the usb (etc) can be clocked from the pll and the processor can be slower

.macro	setup_master_clock	divisor=1
	@ rationale for making this work this way is here and below
	@ (note that we have implemented the safest option)
	@ see top of page 217 if using pll
	@ done in this order so you don't kick the master clock to 48MHz and then divide it by 3 to get the processor clock
	@ but depending on the order the clocks are set, this might still fail (before this function, the rc clock / 1 is selected and the first thing this function does is enable the pll clock / 1 when that's 200 MHz, for example)
	@ a safe thing to do would be to enable the main clock (derived from the oscillator), divided by 2 or 4 or something and then enable the chosen clock and prescaling one by one
	@ safest thing would be to set prescaling to /64 and then choose the slow clock (since that's always available and all we're doing is waiting anyway) and then set the desired prescaling and then the desired clock choice
	set_flash_wait_states_to_one
	@ bits ???xxx?? are the prescaling factor
	@ bits ??????xx are the clock selection
	@ r0 = PMC
	@ r1 = old master clock register, later mangled
	@ r2 = new desired clock selection
	@ r3 = new desired prescaling factor
	@ r4 = temporary for wait_for_mckrdy macro
	ldr	r0, =PMC
	ldr	r1, [r0, #PMC_Master_Clock_Register_offset]
	@ set prescaling to /64
	ldr	r3, =0b110	@ set processor clock to master clock / 64
	and	r1, r1, #0b00011 @ keep the old clock selection
	add	r1, r1, r3, lsl #2
	str	r1, [r0, #PMC_Master_Clock_Register_offset]
	wait_for_mckrdy	temporary_register=r4 @ wait until clock has settled
	@ select 'slow' rc clock as master clock
	ldr	r2, =0b00	@ select 'slow' rc clock as master clock
	and	r1, r1, #0b11100 @ keep the old prescaling factor
	add	r1, r1, r2
	str	r1, [r0, #PMC_Master_Clock_Register_offset]
	wait_for_mckrdy	temporary_register=r4 @ wait until clock has settled
	.if	use_pll
		ldr	r2, =0b11	@ select PLL clock as master clock
	.elseif use_rc_clock_only
		ldr	r2, =0b00	@ select 'slow' rc clock as master clock
	.else
		ldr	r2, =0b01	@ select main oscillator clock as master clock
	.endif
	@ desired prescaling factor:
	ldr	r3, =0b000		@ set processor clock to master clock
	.ifc	\divisor,2
		ldr	r3, =0b001	@ set processor clock to master clock / 2
	.endif
	.ifc	\divisor,4
		ldr	r3, =0b010	@ set processor clock to master clock / 4
	.endif
	.ifc	\divisor,8
		ldr	r3, =0b011	@ set processor clock to master clock / 8
	.endif
	.ifc	\divisor,16
		ldr	r3, =0b100	@ set processor clock to master clock / 16
	.endif
	.ifc	\divisor,32
		ldr	r3, =0b101	@ set processor clock to master clock / 32
	.endif
	.ifc	\divisor,64
		ldr	r3, =0b110	@ set processor clock to master clock / 64
	.endif
	.if	use_pll
		and	r1, r1, #0b00011 @ keep the old clock selection
		add	r1, r1, r3, lsl #2
	.else
		@ keep old prescaling factor and choose desired clock (pll or main)
		and	r1, r1, #0b11100 @ keep the old prescaling factor
		add	r1, r1, r2
	.endif
	str	r1, [r0, #PMC_Master_Clock_Register_offset]
	@ wait until it has settled
	wait_for_mckrdy	temporary_register=r4
	add	r1, r2, r3, lsl #2
	str	r1, [r0, #PMC_Master_Clock_Register_offset]
	wait_for_mckrdy	temporary_register=r4
	determine_and_set_appropriate_flash_wait_states
.endm

.macro	setup_periodic_interval_timer
	@ this must come only after a call to get_master_clock_frequency
	ldr	r0, =PIT
	ldr	r1, =bit00
	ldr	r2, =master_clock_frequency
	ldr	r2, [r2]
	mov	r2, r2, lsr #4 @ PIT divides by 16 off the top
	ldr	r3, =timer_frequency
	str	r2, [r3]
	ldr	r3, =0
	add	r3, r3, r2, lsr #10	@ 1s/1024 ~ 977 microseconds
	add	r3, r3, r2, lsr #15
	sub	r3, r3, r2, lsr #17
	add	r3, r3, r2, lsr #21
	add	r3, r3, r2, lsr #24
	add	r3, r3, r2, lsr #26
@	ldr	r2, =500
@	add	r3, r3, r2
	@ 1/1000 ~ 1/1024 + 1/32768 - 1/131072 + ...
	@ r3 = master_clock_frequency / 16 / 999.5 => 1.001ms
	ldr	r2, =number_of_timer_clock_ticks_in_one_millisecond
	str	r3, [r2]
@	ldr	r3, =1151	@ (18432000 Hz / 16) = 1152000 Hz, so every 1152 ticks, we get 1ms
	cmp	r3, #0
	ldrEQ	r3, =2	@ 30,000 / 16 -> 2 per ms
	add	r3, r3, r1, lsl #24	@ PIT enable
@	add	r3, r3, r1, lsl #25	@ PIT interrupt enable
@		debug	r3
@		ldr	r4, =dummy_4+16
@		str	r3, [r4], #4
@		inc	r3
@		str	r3, [r4]
	str	r3, [r0, #Periodic_Interval_Timer_Mode_Register_offset]
@	str	r3, [r0, #Periodic_Interval_Value_Register_offset]
@	str	r3, [r0, #Periodic_Interval_Image_Register_offset]
.endm

.macro	setup_timer_counter_channel_for_inline_millisecond_delays
	.ifdef	millisecond_delays_available
		ldr	r0, =TCX
		ldr	r1, =bit00
		ldr	r2, =0
@		add	r2, r2, r1, lsl #0	@ enable this clock
		add	r2, r2, r1, lsl #1	@ disable this clock
@		add	r2, r2, r1, lsl #2	@ trigger this clock to reset and start counting
		str	r2, [r0, #TC_Channel_Control_Register_offset]
@		ldr	r3, =0b000	@ select timer_clock1 = master clock / 2^1
@		ldr	r3, =0b001	@ select timer_clock2 = master clock / 2^3
		ldr	r3, =0b010	@ select timer_clock3 = master clock / 2^5
@		ldr	r3, =0b011	@ select timer_clock4 = master clock / 2^7
@		ldr	r3, =0b100	@ select timer_clock5 = master clock / 2^10
@		ldr	r3, =0b101	@ select external clock xc0
@		ldr	r3, =0b110	@ select external clock xc1
@		ldr	r3, =0b111	@ select external clock xc2
		.if	use_rc_clock_only
			ldr	r3, =0b010	@ select timer_clock3 = master clock / 2^5
		.endif
		@ example:  18,432,000 Hz / 1024 = 18,000 per second, so 18 per millisecond
		ldr	r1, =master_clock_frequency
		ldr	r1, [r1]
		mov	r4, #2
		mul	r4, r3, r4
		add	r4, r4, #1
		cmp	r3, #0b100
		addEQ	r4, r4, #1
		@ r4 is now set to the number of bits by which the master clock is divided, above
		mov	r2, r1, lsr #10
		add	r2, r2, r1, lsr #15
		sub	r2, r2, r1, lsr #17
		@ r2 ~ master clock frequency / 1000
@			ldr	r1, =500
@			add	r2, r2, r1
@		ldr	r1, =bit00
@		mov	r1, r1, lsl r4
@		mov	r1, r1, lsr #1
@		add	r2, r1, r2
		@ added "0.5" before dividing so rounding will be correct
		mov	r2, r2, lsr r4
		ldr	r1, =number_of_TCX_clock_periods_in_one_millisecond
		.if	use_rc_clock_only
			ldr	r2, =1
		.endif
		str	r2, [r1]
		str	r3, [r0, #TC_Channel_Mode_Register_offset]
	.else
		.warning	"millisecond delays not available (there may be no delay, or only an approximate delay)"
	.endif
.endm

.macro	setup_timer_channel_1_to_keep_track_of_partial_seconds
	ldr	r0, =TC1
	ldr	r1, =bit00
	ldr	r2, =0
@	add	r2, r2, r1, lsl #0	@ enable this clock
	add	r2, r2, r1, lsl #1	@ disable this clock
@	add	r2, r2, r1, lsl #2	@ trigger this clock to reset and start counting
	str	r2, [r0, #TC_Channel_Control_Register_offset]
@	ldr	r3, =0b000	@ select timer_clock1 = master clock / 2^1
@	ldr	r3, =0b001	@ select timer_clock2 = master clock / 2^3
@	ldr	r3, =0b010	@ select timer_clock3 = master clock / 2^5
@	ldr	r3, =0b011	@ select timer_clock4 = master clock / 2^7
	ldr	r3, =0b100	@ select timer_clock5 = master clock / 2^10
@	ldr	r3, =0b101	@ select external clock xc0
@	ldr	r3, =0b110	@ select external clock xc1
@	ldr	r3, =0b111	@ select external clock xc2
	@ example:  18,432,000 Hz / 1024 = 18,000 per second, so 18 per millisecond
	ldr	r1, =master_clock_frequency
	ldr	r1, [r1]
	mov	r4, #2
	mul	r4, r3, r4
	add	r4, r4, #1
	cmp	r3, #0b100
	addEQ	r4, r4, #1
	@ r4 is now set to the number of bits by which the master clock is divided, above
	mov	r2, r1, lsr #4
	add	r2, r2, r1, lsr #5
	add	r2, r2, r1, lsr #8
	add	r2, r2, r1, lsr #9
	add	r2, r2, r1, lsr #12
	add	r2, r2, r1, lsr #13
	add	r2, r2, r1, lsr #16
	add	r2, r2, r1, lsr #17
	add	r2, r2, r1, lsr #20
	add	r2, r2, r1, lsr #21
	add	r2, r2, r1, lsr #24
	add	r2, r2, r1, lsr #25
	add	r2, r2, r1, lsr #28
	add	r2, r2, r1, lsr #29
	@ r2 ~ master clock frequency / 10
@		ldr	r1, =500
@		add	r2, r2, r1
@	ldr	r1, =bit00
@	mov	r1, r1, lsl r4
@	mov	r1, r1, lsr #1
@	add	r2, r1, r2
	@ added "0.5" before dividing so rounding will be correct
	mov	r2, r2, lsr r4
	ldr	r1, =number_of_TC1_clock_periods_in_one_tenth_of_a_second
	str	r2, [r1]
	str	r3, [r0, #TC_Channel_Mode_Register_offset]
.endm

