.pool
.text @ where actual code belongs
.align 2

.global ignore_exception
ignore_exception:
	b	reset_vector
@	mov	r13_abt, r13_usr
@	mrs	r13, cpsr
@	eor	r13, r13, #0b1111 @ overwrite the fake exception mode stack pointer and switch back to user mode to get access to the regular stack like god intended
.ifc	asdf,rtyuy
@	msr	cpsr, #0b0010000	@ switch to user mode with irq and fiq disabled
	push	r0-r1
	ldr	r0, =PIOA
	ldr	r1, =bit00
@	mov	r1, r1, lsl #general_purpose_output_c
	str	r1, [r0, #Clear_Output_Data_Register_offset]
	str	r1, [r0, #Set_Output_Data_Register_offset]
	pop	r0-r1
.endif
	ldr	r13, =exception_temporary_1
	str	r0, [r13], #4
	str	r1, [r13]
	@ don't just use pulse_general_purpose_output_c here unless you check that that uses r0 and r1 only and never use saveregs=yes in an exception handler
	ldr	r0, =PIOA
	ldr	r1, =bit00
@	mov	r1, r1, lsl #general_purpose_output_c
	str	r1, [r0, #Clear_Output_Data_Register_offset]
	str	r1, [r0, #Set_Output_Data_Register_offset]
	ldr	r0, =exception_link_register
	str	lr, [r0]
@		ldr	r1, =0x66666666
@		str	r1, [r0]
	mrs	r1, cpsr
	ldr	r0, =0b11111
	and	r1, r0, r1
	ldr	r0, =exception_type
	str	r1, [r0]
@		idle
@		bkpt
	ldr	r1, [r13], #-4
	ldr	r0, [r13]
	@if this isn't in an exception mode when the next instruction is executed, the result is unpredictable:
	subs	pc, lr, #4

