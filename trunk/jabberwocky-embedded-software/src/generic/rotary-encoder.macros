@gpio2_rot1_sw_io_number
@gpio3_rot2_sw_io_number

.macro	get_rotary_encoder_a_current_position	destination_register=r0
	.ifeq	model-oscilloscoperev00
		ldr	r3, =gpio3_i2c_address
		ldr	r4, =0
		call	i2c_read_a_byte_with_internal_address
		mov	r4, r0
@		mov	r2, #bit00<<gpio2_rot1_a_io_number
@		mov	r3, #bit00<<gpio2_rot1_b_io_number
		mov	r2, #bit00<<gpio3_rot2_a_io_number
		mov	r3, #bit00<<gpio3_rot2_b_io_number
	.else
		ldr	r0, =PIOA
		ldr	r4, [r0, #PIO_Controller_Pin_Data_Status_Register_offset]
		mov	r2, #bit00<<rotary_encoder_a_a_port_a_bit
		mov	r3, #bit00<<rotary_encoder_a_b_port_a_bit
	.endif
@	rotary_encoder_port_a_bitmask
	@ r2 = bitmask for a output
	@ r3 = bitmask for b output
	@ r4 = word read from port
	ldr	r0, =0
	tst	r4, r2
	orrNE	r0, r0, #0b01
	tst	r4, r3
	orrNE	r0, r0, #0b10
	@ now, r0 = 0b10 * rotary_encoder_a_b + 0b01 * rotary_encoder_a_a
	mov	\destination_register, r0
.endm

.macro	check_rotary_encoder_a_status
0:	get_rotary_encoder_a_current_position	destination_register=r0
@	debug_if_changed	r0
@	mov	r4, r2, lsr #rotary_encoder_a_a_port_a_bit
@	add	r4, r4, r3, lsr #rotary_encoder_a_b_port_a_bit
	ldr	r2, =rotary_encoder_a_previous_position
	ldr	r1, =rotary_encoder_a_current_position
	ldrb	r3, [r1]
	cmp	r0, r3
	bEQ	rotary_encoder_a_still_the_same
	strb	r0, [r1]	@ store current value
	strb	r3, [r2]	@ store old value
	wait_for_n_milliseconds	n=number_of_milliseconds_to_debounce_rotary_encoder
	ldr	r1, =rotary_encoder_a_previous_position
	ldr	r2, =rotary_encoder_a_current_position
	ldrb	r1, [r1]
	ldrb	r2, [r2]
@	rgb=clockwise=increase; 01 00 10 11 01 00 10 11 = 1 0 2 3 1 0 2 3
	cmp	r1, #0b01
	bEQ	check_rotary_encoder_a_status_01
	cmp	r1, #0b00
	bEQ	check_rotary_encoder_a_status_00
	cmp	r1, #0b10
	bEQ	check_rotary_encoder_a_status_10
	cmp	r1, #0b11
	bEQ	check_rotary_encoder_a_status_11
check_rotary_encoder_a_status_01:
	cmp	r2, #0b00
@	bEQ	check_rotary_encoder_a_status_increase
	cmp	r2, #0b11
@	bEQ	check_rotary_encoder_a_status_decrease
	b	check_rotary_encoder_a_status_error
	b	check_rotary_encoder_a_status_null
check_rotary_encoder_a_status_00:
	cmp	r2, #0b10
@	bEQ	check_rotary_encoder_a_status_increase
	cmp	r2, #0b01
@	bEQ	check_rotary_encoder_a_status_decrease
	b	check_rotary_encoder_a_status_error
	b	check_rotary_encoder_a_status_null
check_rotary_encoder_a_status_10:
	cmp	r2, #0b11
@	bEQ	check_rotary_encoder_a_status_increase
	cmp	r2, #0b00
@	bEQ	check_rotary_encoder_a_status_decrease
	b	check_rotary_encoder_a_status_error
	b	check_rotary_encoder_a_status_null
check_rotary_encoder_a_status_11:
	cmp	r2, #0b01
	bEQ	check_rotary_encoder_a_status_decrease
	cmp	r2, #0b10
	bEQ	check_rotary_encoder_a_status_increase
	b	check_rotary_encoder_a_status_error
	b	check_rotary_encoder_a_status_null
check_rotary_encoder_a_status_error:
@	wait_for_n_milliseconds	n=number_of_milliseconds_to_debounce_rotary_encoder
@	b	0b
	ldr	r1, =0
	b	check_rotary_encoder_a_status_change
check_rotary_encoder_a_status_null:
	ldr	r1, =0
	b	check_rotary_encoder_a_status_change
check_rotary_encoder_a_status_decrease:
	ldr	r1, =-1
	b	check_rotary_encoder_a_status_change
check_rotary_encoder_a_status_increase:
	ldr	r1, =1
check_rotary_encoder_a_status_change:
	ldr	r0, =rotary_encoder_a_signed_delta_stable
	ldr	r2, =rotary_encoder_a_signed_delta_stable_previous_increase_or_decrease
@	ldrsb	r3, [r2]
	strb	r1, [r0]
	cmp	r1, #0
	strNEb	r1, [r2]
rotary_encoder_a_still_the_same:
.endm

.macro	show_rotary_encoder_a_status_test_mode
	ldr	r0, =rotary_encoder_a_current_position
	ldr	r0, [r0]
	ldr	r1, =yellow
	ldr	r2, =rotary_encoder_a_signed_delta_stable_previous_increase_or_decrease
	ldrsb	r2, [r2]
	cmp	r2, #0
	ldrGT	r1, =purple
	ldrLT	r1, =orange
	cmp	r0, #0b01
	ldrEQ	r1, =red
	cmp	r0, #0b00
	ldrEQ	r1, =green
	cmp	r0, #0b10
	ldrEQ	r1, =blue
@	cmp	r0, #0b11
@	ldrEQ	r1, =white
	ldr	r0, =rotary_encoder_a_value
	ldrb	r0, [r0]
	ldr	r2, =5
	display_set_color_of_single_pixel	x_coordinate_register=r2, y_coordinate_register=r0, color_register=r1
.endm

@	@	@	@	@	@	@	@	@	@	@	@	@	@	@	@	@	@	@	@

.macro	affect_rotary_encoder_a_change_test_mode
	ldr	r3, =rotary_encoder_a_signed_delta_stable
	ldrsb	r1, [r3]
	ldr	r0, =rotary_encoder_a_value
	ldrb	r2, [r0]
	keep_it_between_signed	min=0, it=r2, max=123
@	keep_it_between_signed_ping_pong	min=0, it=r2, max=123
@	strb	r2, [r0]
	add	r1, r1, r2
	keep_it_between_signed	min=0, it=r1, max=123
@	keep_it_between_signed_ping_pong	min=0, it=r1, max=123
	strb	r1, [r0]
@		debug_if_changed	r1
	ldr	r0, =0
	strb	r0, [r3]
.endm



