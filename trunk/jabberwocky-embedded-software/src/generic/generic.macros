@ copyright 2007 mza (Matthew Andrew)
@ started 2007-09-19 (talk like a pirate day)

@ ============================================================================

.macro	call_register	register
	push	lr
	mov	lr, pc
	mov	pc, \register
@	blx	\register
	pop	lr
.endm

.macro	call	address
	push	lr
	bl	\address
	pop	lr
.endm

.macro	vectored_call	min, variable, max, vector_table
	@ variable must be only a byte
	push	r0-r2
	ldr	r0, =\vector_table
@	ldr	r1, =\vector_table_end
@	sub	r2, r1, r0
	ldr	r1, =\variable
	ldrb	r1, [r1]
		push	r0-r12
	keep_it_between_unsigned	min=\min, it=r1, max=\max
		pop	r0-r12
	sub	r1, r1, #\min	@ so that the offset from the table beginning is zero for the min'th vector
	ldr	r2, =4
	mla	r0, r2, r1, r0
		ldr	r1, =dummy_4+4
		str	r0, [r1]
	call_register	r0
	pop	r0-r2
.endm

.macro	return
	mov	pc, lr
.endm

@ ============================================================================

.macro	push	registerrange
	stmed	sp!, {\registerrange}
.endm

.macro	pop	registerrange
	ldmed	sp!, {\registerrange}
.endm

@ ============================================================================

.macro	mypool
	@ only necessary when this needs to be done inside code blocks
	@ so it is not necessary in between functions
	b	1f
.pool
1:
.endm

@ ============================================================================

.macro	fill_ram	fill=0xa5f05a2c
	ldr	r0, =\fill
@		ldr	r0, =0x11111111
	ldr	r1, =bottom_of_sram
	ldr	r2, =size_of_sram
0:
	str	r0, [r1], #4
	subS	r2, r2, #4
	bHI	0b
.endm

.macro	clear_ram
	ldr	r0, =0
@		ldr	r0, =0x11111111
	@ bug/future:  these should be defines, since this isn't right on an 'a3 - ???
	ldr	r1, =bottom_of_sram
	ldr	r2, =size_of_sram
0:
	str	r0, [r1], #4
	subS	r2, r2, #4
	bHI	0b
.endm

.macro	clear_ram_until_bottom_of_stack
	ldr	r0, =0
	ldr	r1, =bottom_of_sram
	ldr	r2, =size_of_sram
	mov	r3, sp
0:	str	r0, [r1], #4
	cmp	r3, r1
@	subS	r2, r2, #4
	bHS	0b
.endm

@ ============================================================================

.macro	dec	register, saveregs=no
	@ this alters the contents of \register (and the cpsr if saveregs=no)
	@ saveregs=yes saves the flags here - in that case, the zero flag won't correspond to decrementing to zero
	@ would be easier to just use sub instead of subS and save/restoring the flags...
	.ifc \saveregs,yes
		.ifc	\register, r0
			push	r1
			push_flags_through	r1
		.else
			push	r0
			push_flags_through	r0
		.endif
	.endif
	subS	\register, \register, #1
	.ifc \saveregs,yes
		.ifc	\register, r0
			pop_flags_through	r1
			pop	r1
		.else
			pop_flags_through	r0
			pop	r0
		.endif
	.endif
.endm

.macro	inc	register, saveregs=no
	@ this alters the contents of \register (and the cpsr if saveregs=no)
	@ saveregs=yes saves the flags here - in that case, the zero flag won't correspond to decrementing to zero
	@ would be easier to just use sub instead of subS and save/restoring the flags...
	.ifc \saveregs,yes
		.ifc	\register, r0
			push	r1
			push_flags_through	r1
		.else
			push	r0
			push_flags_through	r0
		.endif
	.endif
	addS	\register, \register, #1
	.ifc \saveregs,yes
		.ifc	\register, r0
			pop_flags_through	r1
			pop	r1
		.else
			pop_flags_through	r0
			pop	r0
		.endif
	.endif
.endm

@ ============================================================================

.macro	idle
	ldr	r0, =PMC
	ldr	r1, =bit00
	str	r1, [r0, #PMC_System_Clock_Disable_Register_offset]
	@ after this is done, the jtag debugger won't be able to talk to the uC until the reset button has been set
.endm

.macro	reset_device
	@ perform device reset:
	@ don't bother with saving registers
	ldr	r0, =RSTC
	ldr	r1, =reset_bits_for_full_reset
	str	r1, [r0, #Reset_Controller_Control_Register_offset]
.endm

.macro	reset_if_requested
	@ this doesn't reset the device (for sam-ba boot bugginess) - it just jumps to the reset exception vector address
	ldr	r0, =RSTC
	ldr	r1, =bit00
	ldr	r2, [r0, #Reset_Controller_Status_Register_offset]
	tst	r2, r1
	bEQ	1f
@	display_activate_reset
@	delay_imm	9000
@	display_deactivate_reset
@	b	reset_vector
	reset_device
1:
.endm

@ ============================================================================

.macro	store_register_in_base_plus_offset_address	register, address_base, address_offset, saveregs=no
	.ifc	\register, r0
		.ifc \saveregs,yes
			push	r1
		.endif
		ldr	r1, =\address_base
		str	\register, [r1, #\address_offset]
		.ifc \saveregs,yes
			pop	r1
		.endif
	.else
		.ifc \saveregs,yes
			push	r0
		.endif
		ldr	r0, =\address_base
		str	\register, [r0, #\address_offset]
		.ifc \saveregs,yes
			pop	r0
		.endif
	.endif
.endm

@ ============================================================================

.macro	set_bit_in_system_controller_register	bit, address_base, address_offset, saveregs=no
	@ setup a port_a bit to be associated with parallel io instead of an integrated peripheral:
	.ifc \saveregs,yes
		push	r0-r1
	.endif
	@ this set of 3 instructions works, along with the last two before the pop:
@	mov	r0, \bit	@ load r0 with the bit we want to use
@	mov	r1, #bit00	@ load r1 with a 1 in the 0th bit
@	mov	r1, r1, LSL r0	@ load r1 with r1, logically shifted left by r0 bits
	@ this set of 2 instructions works, along with the last two before the pop:
	mov	r0, #bit00	@ load r0 with a 1 in the 0th bit
	mov	r1, r0, lsl \bit @ load r1 with r0 lsl'd by the number of bits we want
	ldr	r0, =\address_base @ load r0 with the port a configuration register block base address
	str	r1, [r0, #\address_offset]	@ load the memory address specified by [r0+an offset] with the contents of r1 (the bitmask we want)
	.ifc \saveregs,yes
		pop	r0-r1
	.endif
.endm

.macro	set_bitmask_in_system_controller_register	bitmask_register, address_base, address_offset, saveregs=no
	@ setup a port_a bit to be associated with parallel io instead of an integrated peripheral:
@		push	r0-r1
@	ldr	r0, =\register	@ load r0 with the port a configuration register block base address
@	mov	r1, \bitmask
@	str	r1, [r0, #\register_offset]	@ load the memory address specified by [r0+an offset] with the contents of r1 (the bitmask we want)
@	.ifc \saveregs,yes
@		pop	r0-r1
@	.endif
@	.ifc \saveregs,yes
@		push	r0
@	.endif
	store_register_in_base_plus_offset_address	register=\bitmask_register, address_base=\address_base, address_offset=\address_offset, saveregs=\saveregs
@	.ifc \saveregs,yes
@		pop	r0
@	.endif
.endm

@ ============================================================================

.macro	push_flags_through	register
	@ this destroys the contents of \register and the cpsr
	mrs	\register, cpsr
	push	\register
.endm

.macro	pop_flags_through	register
	@ this destroys the contents of \register and the cpsr
	pop	\register
	msr	cpsr_cxsf, \register
.endm

@ ============================================================================

.macro	delay_asm	count, saveregs=no
	@ the c function doesn't save registers, so this may cause bugs
	.ifc \saveregs,yes
		push	lr
		push	r0
	.endif
	ldr	r0, =\count
	call	delay__c
	.ifc \saveregs,yes
		pop	r0
		pop	lr
	.endif
.endm

.macro	delay_ms_imm	number_of_milliseconds, saveregs=no
	@ 0 => 2^32
	.ifc \saveregs,yes
		push	r0-r1
		push_flags_through	r0
	.endif
	ldr	r1, =\number_of_milliseconds
5:
@	delay_imm	4608	@ works for 18.432MHz crystal with no prescaling
	delay_imm	15000
	dec	r1
	bNE	5b
	.ifc \saveregs,yes
		pop_flags_through	r0
		pop	r0-r1
	.endif
.endm

.macro	delay_imm	count, saveregs=no
	@ saveregs=yes should save the flags here and r0
	.ifc \saveregs,yes
		push	r0
		push_flags_through	r0
	.endif
	ldr	r0, =\count
0:
	dec	r0
	bNE	0b
	.ifc \saveregs,yes
		pop_flags_through	r0
		pop	r0
	.endif
.endm

.macro	delay_reg	register, saveregs=no
@	@ saveregs=yes saves the flags here, as well as \register
	.ifc \saveregs,yes
		push	\register
@		.ifc	\register, r0
@			push	r1
@			push_flags_through	r1
@		.else
@			push	r0
@			push_flags_through	r0
@		.endif
	.endif
@	cmp	\register, #0
@	bEQ	1f
0:	dec	\register
	bHS	0b
	.ifc \saveregs,yes
		pop	\register
@		.ifc	\register, r0
@			pop_flags_through	r1
@			pop	r1
@		.else
@			pop_flags_through	r0
@			pop	r0
@		.endif
	.endif
1:
.endm

@ ============================================================================

.macro	neg	destination_register, source_register
@untested!
	rsb	\destination_register, \source_register, #0
.endm

@ ============================================================================

.macro	setup_debug_stack
	ldr	r0, =debug_stack_pointer
	ldr	r1, =beginning_of_debug_stack
	str	r1, [r0]
.endm

.macro	debug	register
	@ bug/future:  this should save/restore the flags
	.ifne	debug
		push	r0-r3
		mov	r0, \register
		ldr	r1, =debug_stack_pointer
		ldr	r2, [r1]
		ldr	r3, =end_of_debug_stack
		cmp	r2, r3
		bHS	1f
		str	r0, [r2], #4
		str	r2, [r1]
1:
		pop	r0-r3
	.endif
.endm

.macro	debug_if_changed	register
	@ bug/future:  this should save/restore the flags
	.ifne	debug
		push	r0-r3
		mov	r0, \register
		ldr	r1, =debug_stack_pointer
		ldr	r2, [r1]
		ldr	r3, =end_of_debug_stack
		cmp	r2, r3
		bHS	1f
		ldr	r3, [r2, #-4]
		cmp	r0, r3
		strNE	r0, [r2], #4
		strNE	r2, [r1]
1:
		pop	r0-r3
	.endif
.endm

@ ============================================================================

.macro	keep_it_between_unsigned	min, it, max
	@ this modifies "it" even if saveregs=yes
	@ this keeps the statement min <= it <= max true
	@ if it's higher than max when this macro starts, it'll become min
	@ if it's lower than min when this macro starts, it'll become max
	@ if min is greater than max, it will be set to ???
	cmp	\it, #\min
	ldrLO	\it, =\max
	cmp	\it, #\max
	ldrHI	\it, =\min
	@ not_too_high
.endm

.macro	keep_it_between_unsigned_ping_pong	min, it, max
	@ this modifies "it" even if saveregs=yes
	@ this keeps the statement min <= it <= max true
	@ if it's higher than max when this macro starts, it'll become max
	@ if it's lower than min when this macro starts, it'll become min
	@ if min is greater than max, it will be set to ???
	cmp	\it, #\min
	ldrLO	\it, =\min
	cmp	\it, #\max
	ldrHI	\it, =\max
.endm

.macro	keep_it_between_signed	min, it, max
	@ this modifies "it" even if saveregs=yes
	@ this keeps the statement min <= it <= max true
	@ if it's higher than max when this macro starts, it'll become min
	@ if it's lower than min when this macro starts, it'll become max
	@ if min is greater than max, it will be set to ???
	cmp	\it, #\min
	ldrLT	\it, =\max
	cmp	\it, #\max
	ldrGT	\it, =\min
.endm

.macro	keep_it_between_signed_ping_pong	min, it, max
	@ this modifies "it" even if saveregs=yes
	@ this keeps the statement min <= it <= max true
	@ if it's higher than max when this macro starts, it'll become max
	@ if it's lower than min when this macro starts, it'll become min
	@ if min is greater than max, it will be set to ???
	cmp	\it, #\min
	ldrLT	\it, =\min
	cmp	\it, #\max
	ldrGT	\it, =\max
.endm

@ ============================================================================

.macro	copy_text_to_data
	@ copies block of ram variable initializations from flash to ram
	ldr	r1, =_etext
	ldr	r2, =_data
	ldr	r3, =_edata
0:
	cmp	r2, r3
	ldrLO	r0, [r1], #4	@ if r2 is less than r3, load r0 from [r1] and add 4 to r1
	strLO	r0, [r2], #4	@ if r2 is less than r3, store r0 in [r2] and add 4 to r2
	bLO	0b
.endm

.macro	clear_bss
	@ clears ram variables that are supposed to be initialized to zero
	mov	r0, #0
	ldr	r1, =_bss_start
	ldr	r2, =_bss_end
0:
	cmp	r1, r2
	strLO	r0, [r1], #4
	bLO	0b
.endm

@ ============================================================================

.macro	wait_indefinitely
0:	mov	r1, r1
	mov	r2, r2
	mov	r3, r3
	mov	r4, r4
	b	0b
.endm

@ ============================================================================

.macro	swap_registers	register_1, register_2
	push	\register_1
	mov	\register_1, \register_2
	pop	\register_2
.endm

@ ============================================================================

.macro	convert_hexadecimal_to_a_partial_decimal_nibble	place,input_register,result_register,temporary_register
	@ this modifies input_register and result_register
	@ and destroys temporary_register
@	push	\temporary_register
	ldr	\temporary_register, =\place
	ldr	\result_register, =0
0:	cmp	\input_register, \temporary_register
	addHS	\result_register, \result_register, #1
	subHS	\input_register, \input_register, \temporary_register
	bHS	0b
@	pop	\temporary_register
.endm

.macro	convert_hexadecimal_to_BCD_macro
	@ input and output register is r0
	@ note that this can only output as much as 99,999,999 in decimal (8 decimal digits)
	@ even though the input can be as high as 4,294,967,295 = 2^32-1 (8 hexadecimal digits)
	@ destroys r1, r2, r3, r4
	ldr	r4, =0
	ldr	r3, =0
	convert_hexadecimal_to_a_partial_decimal_nibble	place=1000000000,input_register=r0,result_register=r1,temporary_register=r2
	add	r4, r4, r1, lsl #36-32
	convert_hexadecimal_to_a_partial_decimal_nibble	place=100000000,input_register=r0,result_register=r1,temporary_register=r2
	add	r4, r4, r1, lsl #32-32
	convert_hexadecimal_to_a_partial_decimal_nibble	place=10000000,input_register=r0,result_register=r1,temporary_register=r2
	add	r3, r3, r1, lsl #28
	convert_hexadecimal_to_a_partial_decimal_nibble	place=1000000,input_register=r0,result_register=r1,temporary_register=r2
	add	r3, r3, r1, lsl #24
	convert_hexadecimal_to_a_partial_decimal_nibble	place=100000,input_register=r0,result_register=r1,temporary_register=r2
	add	r3, r3, r1, lsl #20
	convert_hexadecimal_to_a_partial_decimal_nibble	place=10000,input_register=r0,result_register=r1,temporary_register=r2
	add	r3, r3, r1, lsl #16
	convert_hexadecimal_to_a_partial_decimal_nibble	place=1000,input_register=r0,result_register=r1,temporary_register=r2
	add	r3, r3, r1, lsl #12
	convert_hexadecimal_to_a_partial_decimal_nibble	place=100,input_register=r0,result_register=r1,temporary_register=r2
	add	r3, r3, r1, lsl #8
	convert_hexadecimal_to_a_partial_decimal_nibble	place=10,input_register=r0,result_register=r1,temporary_register=r2
	add	r3, r3, r1, lsl #4
	add	r0, r0, r3
.endm

.macro	convert_hexadecimal_to_BCD_macro_divide_by_1000
	@ input and output register is r0
	@ this effectively divides by 1000 before generating the result, so the output is in kilo-whatevers
	@ destroys r1, r2, r3
	ldr	r3, =0
	convert_hexadecimal_to_a_partial_decimal_nibble	place=1000000000,input_register=r0,result_register=r1,temporary_register=r2
	add	r3, r3, r1, lsl #24
	convert_hexadecimal_to_a_partial_decimal_nibble	place=100000000,input_register=r0,result_register=r1,temporary_register=r2
	add	r3, r3, r1, lsl #20
	convert_hexadecimal_to_a_partial_decimal_nibble	place=10000000,input_register=r0,result_register=r1,temporary_register=r2
	add	r3, r3, r1, lsl #16
	convert_hexadecimal_to_a_partial_decimal_nibble	place=1000000,input_register=r0,result_register=r1,temporary_register=r2
	add	r3, r3, r1, lsl #12
	convert_hexadecimal_to_a_partial_decimal_nibble	place=100000,input_register=r0,result_register=r1,temporary_register=r2
	add	r3, r3, r1, lsl #8
	convert_hexadecimal_to_a_partial_decimal_nibble	place=10000,input_register=r0,result_register=r1,temporary_register=r2
	add	r3, r3, r1, lsl #4
	add	r0, r0, r3
.endm

.macro	convert_BCD_quantity_of_milliAmps_to_string_and_display_it	color, position_x, position_y
	@ r0 = input register = 0x00000123 for "123mA" (for example)
	ldr	r2, =font_color
	ldr	r1, =\color
	str	r1, [r2]
	ldr	r2, =position_of_center_of_current_character_x
	ldr	r1, =\position_x
	strb	r1, [r2]
	ldr	r2, =position_of_center_of_current_character_y
	ldr	r1, =\position_y
	strb	r1, [r2]
	call	convert_BCD_quantity_of_milliAmps_to_string_and_display_it
.endm

.macro	convert_BCD_quantity_of_deciVolts_to_string_and_display_it	color, position_x, position_y
	@ r0 = input register = 0x00000123 for "12.3V" (for example)
	ldr	r2, =font_color
	ldr	r1, =\color
	str	r1, [r2]
	ldr	r2, =position_of_center_of_current_character_x
	ldr	r1, =\position_x
	strb	r1, [r2]
	ldr	r2, =position_of_center_of_current_character_y
	ldr	r1, =\position_y
	strb	r1, [r2]
	call	convert_BCD_quantity_of_deciVolts_to_string_and_display_it
.endm

@ ============================================================================

.macro	itoa_inner_macro	place,input_register,result_register,temporary_register, ascii_0_register, output_string_register, leading_zero_slash_counter_register
	@ this modifies everything but \ascii_0_register
	convert_hexadecimal_to_a_partial_decimal_nibble	place=\place,input_register=\input_register,result_register=\result_register,temporary_register=\temporary_register
	cmp	\leading_zero_slash_counter_register, #0
	cmpEQ	\result_register, #0
	addNE	\leading_zero_slash_counter_register, \leading_zero_slash_counter_register, #1
	addNE	\result_register, \result_register, \ascii_0_register
	strNEb	\result_register, [\output_string_register], #1
.endm

@ ============================================================================

