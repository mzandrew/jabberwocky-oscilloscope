@ copyright 2007 mza (Matthew Andrew)
@ started 2007-09-19 (talk like a pirate day)

@ ============================================================================

.macro	initialize_everything
	initialize_arm7
	.ifeq	function-clock
		call	initialize_arm7_for_clock_and_initialize_clock
	.endif
	call	initialize_arm7_for_rotary_encoders
	call	initialize_arm7_for_other_stuff
	.ifeq	function-oscilloscope
		call	initialize_arm7_for_oscilloscope_and_initialize_oscilloscope
	.endif
.endm

.macro	initialize_arm7
	@ initialize everything:
@		call	clear_ram
@		call	toggle_general_purpose_output_a
@		fill_ram	fill=0x55555555
	setup_watchdog_timer
	.if	debug
		setup_debugging_output_lines
	.endif
		call	toggle_general_purpose_output_a_as_fast_as_possible_to_check_processor_speed
	setup_main_oscillator
		call	toggle_general_purpose_output_a_as_fast_as_possible_to_check_processor_speed
	setup_pll
		call	toggle_general_purpose_output_a_as_fast_as_possible_to_check_processor_speed
	.ifeq	use_rc_clock_only
		setup_master_clock	@ this runs get_master_clock_frequency
		call	toggle_general_purpose_output_a_as_fast_as_possible_to_check_processor_speed
	.endif
	@clear_ram	@ can't make this init macro a function because clear_ram overwrites the stack
	clear_ram_until_bottom_of_stack
	copy_text_to_data
	clear_bss
	setup_user_reset
	call	initialize_arm7_for_oled_display_and_initialize_oled_display
	setup_debug_stack
	setup_peripheral_clocks
	call	get_master_clock_frequency
	setup_periodic_interval_timer
	setup_timer_counter_channel_for_inline_millisecond_delays
@	setup_button_input_lines	@ this needs the millisecond timer
	.ifne	shutdown_controller_available
		call	setup_shutdown_controller_wakeup
	.endif
@ bug/future:  this would benefit from knowing the actual clock rate
@ bug/future:  but that's a problem if we change the clock rate later...
	setup_adc
	.ifne	need_sine_and_cosine_lookup_table
		call	generate_lookup_tables_64
	.endif
		call	toggle_general_purpose_output_a_as_fast_as_possible_to_check_processor_speed
	.ifne	i2c_controller_available
		call	setup_i2c_lines
		call	setup_twi_for_i2c
		call	setup_i2c_gpio_devices
	.endif
	.ifeq	function-oscilloscope
		call	setup_other_input_output_lines
	.endif
	.ifeq	use_rc_clock_only
		setup_master_clock	divisor=1	@ this runs get_master_clock_frequency
		setup_periodic_interval_timer
		setup_timer_counter_channel_for_inline_millisecond_delays
		.ifeq	function-clock
			setup_timer_channel_1_to_keep_track_of_partial_seconds
		.endif
	.endif
		call	toggle_general_purpose_output_a_as_fast_as_possible_to_check_processor_speed
.endm

@ ============================================================================

.macro	set_flash_wait_states_to_one
	ldr	r0, =flash_wait_states
	ldr	r1, =1
	strb	r1, [r0]
	setup_embedded_flash_controller	@ includes setting flash wait states
.endm

.macro	determine_and_set_appropriate_flash_wait_states
	call	get_master_clock_frequency
	ldr	r0, =master_clock_frequency
	ldr	r0, [r0]
	ldr	r2, =1	@ one wait state
	ldr	r1, =30000000	@ supposedly, the flash is reliable up to 30MHz
						@ be careful that the get_master_clock_frequency multiply
						@ routine didn't overflow or this test will miss sometimes
	cmp	r0, r1
	bHI	1f
	ldr	r2, =0	@ zero wait states
1:
	ldr	r0, =flash_wait_states
	strb	r2, [r0]
	setup_embedded_flash_controller	@ includes setting flash wait states
.endm

.macro	setup_embedded_flash_controller
	ldr	r0, =MC
	ldr	r1, =flash_wait_states
	ldrb	r1, [r1]
	mov	r2, r1, lsl #8 @ flash wait states
	@ set flash microsecond cycle number > 0 here if you want to write to the flash (see page 139 of atmel's pdf)
	str	r2, [r0, #MC_Flash_Mode_Register_offset]
.endm

@ ============================================================================
@ ============================================================================

.macro	setup_user_reset
	@ enable user reset via reset button:
	ldr	r0, =RSTC
	ldr	r1, =1	@ allow the external pin to reset the device
@	ldr	r1, =0	@ don't allow the external pin to reset the device
	ldr	r2, =0x4	@ reset must be asserted for at least 2^(n+1) slow clock cycles
	add	r1, r1, r2, lsl #8
	ldr	r2, =0xa5	@ key
	add	r1, r1, r2, lsl #24
@	ldr	r1, =0xa5000401
	str	r1, [r0, #Reset_Controller_Mode_Register_offset]
.endm

.macro	setup_adc_10_bit_5MHz_on_20MHz_arm7
	@ set the adc mode register:
@	ldr	r0, =master_clock_frequency
@	ldr	r0, [r0]
@	mov	r1, r0, lsr #1 @ divide by 2
@	mov	r1, r1, lsr	#23	@ divide by adcclock=2^23, which is bigger than 5 million (maximum 10 bit clock is 5MHz)
@	sub	r1, r1, #1	@ subtract 1
@	mov	r2, r1, lsl #8	@ prescal
@	mov	r3, 
	@ see electronics notebook, page 116 for calculations
	ldr	r1, =0
	ldr	r0, =1	@ prescal = 1, so adcclock = mck/[2*(prescal+1)] = 20MHz/4 = 5MHz and 250kHz for mck=1MHz
	add	r1, r1, r0, lsl #8
	ldr	r0, =12	@ startup = 12, so startup time = 8(startup+1)/adcclock = 104/adcclock = 20.8us for 20MHz and 416us for 1MHz
	add	r1, r1, r0, lsl #16
	ldr	r0, =2	@ shtim = 2, so sample&hold time = (shtim+1)/adcclock = 3/adcclock = 600ns for 20MHz and 12us for 1MHz
	add	r1, r1, r0, lsl #24
	ldr	r0, =ADC
	str	r1, [r0, #ADC_Mode_Register_offset]
	@ enable channels in the adc:
	ldr	r1, =0b00010000	@ straight-up bitmask
	str	r1, [r0, #ADC_Channel_Enable_Register_offset]
.endm

.macro	setup_adc
	.ifne	model-oscilloscoperev00
		.error "this macro can only be used for the oscilloscope rev00"
	.endif
	@ set the adc mode register:
@	ldr	r0, =master_clock_frequency
@	ldr	r0, [r0]
@	mov	r1, r0, lsr #1 @ divide by 2
@	mov	r1, r1, lsr	#23	@ divide by adcclock=2^23, which is bigger than 5 million (maximum 10 bit clock is 5MHz)
@	sub	r1, r1, #1	@ subtract 1
@	mov	r2, r1, lsl #8	@ prescal
@	mov	r3, 
	@ see electronics notebook, page 116 for calculations
	@ this is also done in the function setup_adc_for_onboard_oscilloscope
	@ but this gets done first (it is called from initialize_arm7)
	@ so the other one affects normal operation
	ldr	r1, =0
	ldr	r0, =3
	add	r1, r1, r0, lsl #8 @ prescal
	ldr	r0, =18
	add	r1, r1, r0, lsl #16 @ startup
	ldr	r0, =4
	add	r1, r1, r0, lsl #24 @ shtim
	ldr	r0, =bit00
	add	r1, r1, r0, lsl #4 @ lowres
	ldr	r0, =ADC
	str	r1, [r0, #ADC_Mode_Register_offset]
	@ enable channels in the adc:
	ldr	r1, =0b00000100	@ straight-up bitmask, one bit per channel
	str	r1, [r0, #ADC_Channel_Enable_Register_offset]
.endm

.macro	setup_spi_for_rtc
	ldr	r0, =SPI
	ldr	r1, =bit00	@ SPI enable
	str	r1, [r0, #SPI_Control_Register_offset]
	ldr	r2, =0
	add	r2, r2, r1	@ SPI master mode
@	add	r2, r2, r1, lsl #1	@ variable peripheral select (used if talking to more than one device)
@	add	r2, r2, r1, lsl #2	@ chip-selects are connected to a 4-to-16 decoder
	str	r2, [r0, #SPI_Mode_Register_offset]
	ldr	r2, =0
	add	r2, r2, r1	@ CPOL = 1
@	add	r2, r2, r1, lsl #1	@ NCPHA = leading edge capture, rising edge set
@	add	r2, r2, r1, lsl #3	@ chip select remains active after a transfer
	ldr	r3, =5
	add	r2, r2, r3, lsl #8	@ divide MCK by 5 to get spi clock (4MHz is the max for the DS3234, so this is good up to 20MHz)
	str	r2, [r0, #SPI_Chip_Select_Register_0_offset]
	ldr	r0, =spi_port_a_bitmask
	set_bitmask_in_parallel_io_port_a_controller_register	bitmask_register=r0, address_offset=PIO_Peripheral_A_Select_Register_offset, saveregs=yes
	set_bitmask_in_parallel_io_port_a_controller_register	bitmask_register=r0, address_offset=PIO_Disable_Register_offset, saveregs=yes
.endm

@ ============================================================================

