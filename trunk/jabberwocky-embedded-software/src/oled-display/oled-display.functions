@ copyright 2007 mza (Matthew Andrew)
@ started 2007-09-19 (talk like a pirate day)

.pool
.text @ where actual code belongs
.align 2

@ ============================================================================

clear_display:
	push	r0-r2
	display_write_command_immediate	0x8e	@ clear window
	display_write_data_immediate	0
	display_write_data_immediate	0, mode_is_already_set=yes
	display_write_data_immediate	131, mode_is_already_set=yes
	display_write_data_immediate	131, mode_is_already_set=yes
	pop	r0-r2
	return

@ ============================================================================
pulse_display_reset_line:
	push	r0-r1
	ldr	r0, =PIOA
	ldr	r1, =bit00<<display_reset_port_a_bit
	str	r1, [r0, #Clear_Output_Data_Register_offset]
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	str	r1, [r0, #Set_Output_Data_Register_offset]
	pop	r0-r1
	return

@ ============================================================================

display_a_string:
	push	r0-r5
	ldr	r0, =address_of_current_character_in_string
	ldr	r1, [r0]
	ldr	r2, =position_of_center_of_current_character_x
	ldrb	r3, [r2]
	ldr	r4, =current_character
	@	r5, =[current_character]
display_a_string_next_character:
	ldrb	r5, [r1], #1
	str	r1, [r0]
	cmp	r5, #0
	beq	display_a_string_done
	strb	r5, [r4]
	call	draw_a_character
	add	r3, r3, #character_width+character_horizontal_spacing_between_characters
	strb	r3, [r2]
	b	display_a_string_next_character
display_a_string_done:
	pop	r0-r5
	return

display_a_centered_string:
	@ r0 must be the address of the beginning of the string
	push	r0-r2	@ bug/future
	ldr	r2, =address_of_current_character_in_string
	str	r0, [r2]
	ldr	r1, =white
	ldr	r0, =font_color
	str	r1, [r0]
	ldr	r1, =16	@ bug/future:  actually calculate the strnlen etc
	ldr	r0, =position_of_center_of_current_character_x
	strb	r1, [r0]
	ldr	r0, =position_of_center_of_current_character_y
	ldr	r1, =display_center_y
	strb	r1, [r0]
	call	display_a_string
	pop	r0-r2	@ bug/future
	return

display_a_paragraph:
	push	r0-r5
	ldr	r0, =position_of_center_of_current_character_x
	ldrb	r1, [r0]
	ldr	r2, =address_of_current_character_in_string
	ldr	r3, =position_of_center_of_current_character_y
	ldrb	r4, [r3]
display_a_paragraph_next:
	call	display_a_string
	ldr	r5, [r2]
	ldrb	r5, [r5]
	cmp	r5, #0	@ end on a second consecutive null
	bEQ	display_a_paragraph_done
	add	r4, r4, #character_height+character_vertical_spacing_between_characters
	strb	r4, [r3]
	strb	r1, [r0]
	b	display_a_paragraph_next
display_a_paragraph_done:
	pop	r0-r5
	return

display_a_friendly_message:
	push	r0-r12	@ bug/future: this could be more efficient; have to check the macros below
	ldr	r0, =font_color
	ldr	r1, =grey_2
	str	r1, [r0]
	ldr	r0, =address_of_current_character_in_string
	ldr	r1, =jabberwocky
	str	r1, [r0]
	ldr	r0, =6
	ldr	r1, =position_of_center_of_current_character_x
	strb	r0, [r1]
	ldr	r0, =118
	ldr	r1, =position_of_center_of_current_character_y
	strb	r0, [r1]
	call	display_a_string
	ldr	r0, =address_of_current_character_in_string
	ldr	r1, =testmessage
	str	r1, [r0]
	ldr	r0, =3
	ldr	r1, =position_of_center_of_current_character_x
	strb	r0, [r1]
	ldr	r0, =4
	ldr	r1, =position_of_center_of_current_character_y
	strb	r0, [r1]
@	call	display_a_string
	pop	r0-r12	@ bug/future: this could be more efficient; have to check the macros below
	return

@ ============================================================================

draw_a_circle:
	push	r0-r3
	ldr	r0, =x_position_of_center_of_circle
	ldrb	r0, [r0]
	ldr	r1, =y_position_of_center_of_circle
	ldrb	r1, [r1]
	ldr	r3, =color
	ldr	r3, [r3]
	ldr	r2, =radius_of_circle
	ldrb	r2, [r2]
@	mov	r2, r2, lsl #1
	draw_circle	center_x_register=r0, center_y_register=r1, radius_register=r2, line_color_register=r3, fill_color_register=r3
	pop	r0-r3
	return

@ ============================================================================

render_a_BCD_integer:
	push	r0-r12	@ bug/future
	ldr	r0, =address_of_current_character_in_string
	ldr	r1, =beginning_of_temporary_string_2
	str	r1, [r0]
	call	BCD_integer_to_ascii_string
	call	display_a_string
	pop	r0-r12	@ bug/future
	return

render_a_hexadecimal_integer:
	push	r0-r12	@ bug/future
	ldr	r0, =address_of_current_character_in_string
	ldr	r1, =beginning_of_temporary_string_2
	str	r1, [r0]
	call	hexadecimal_integer_to_ascii_string
	call	display_a_string
	pop	r0-r12	@ bug/future
	return

hexadecimal_integer_to_ascii_string:
	push	r0-r12	@ bug/future
	ldr	r0, =integer_to_render
	ldr	r0, [r0]
@		ldr	r0, =0x567
	ldr	r2, =0xf
	ldr	r3, =beginning_of_temporary_string_1
	@ r0 = current partial number
	@ r1 = current nibble
	@ r2 = nibble bitmask
	@ r3 = current position in string
	ldr	r1, ='h
	strb	r1, [r3], #1
@		ldr	r1, =0
@		strb	r1, [r3], #1
@		pop	r0-r12	@ bug/future
@		return
hexadecimal_integer_to_ascii_string_next:
@		debug	r0
	mov	r1, r0
	and	r1, r1, r2
	cmp	r1, #10
	addLT	r1, r1, #48	@ decimal numbers
@	addGE	r1, r1, #65-10	@ uppercase letters
	addGE	r1, r1, #97-10	@ lowercase letters
	strb	r1, [r3], #1
	movS	r0, r0, lsr #4
	bNE	hexadecimal_integer_to_ascii_string_next
	ldr	r1, =0
	strb	r1, [r3], #-1
@		pop	r0-r12	@ bug/future
@		return
@	sub	r3, r3, #1
	ldr	r0, =beginning_of_temporary_string_2
	ldr	r2, =beginning_of_temporary_string_1
hexadecimal_integer_to_ascii_string_next_next:
	ldrb	r1, [r3], #-1
	strb	r1, [r0], #1
	cmp	r3, r2
	bHS	hexadecimal_integer_to_ascii_string_next_next
	ldr	r1, =0
	strb	r1, [r0]
	pop	r0-r12	@ bug/future
	return

BCD_integer_to_ascii_string:
	push	r0-r12	@ bug/future
	ldr	r0, =integer_to_render
	ldr	r0, [r0]
@		ldr	r0, =0x567
	ldr	r2, =0xf
	ldr	r3, =beginning_of_temporary_string_1
	@ r0 = current partial number
	@ r1 = current nibble
	@ r2 = nibble bitmask
	@ r3 = current position in string
@@	ldr	r1, ='h
@@	strb	r1, [r3], #1
@		ldr	r1, =0
@		strb	r1, [r3], #1
@		pop	r0-r12	@ bug/future
@		return
BCD_integer_to_ascii_string_next:
@		debug	r0
	mov	r1, r0
	and	r1, r1, r2
	cmp	r1, #10
	addLT	r1, r1, #48	@ decimal numbers
@	addGE	r1, r1, #65-10	@ uppercase letters
@	addGE	r1, r1, #97-10	@ lowercase letters
	strb	r1, [r3], #1
	movS	r0, r0, lsr #4
	bNE	BCD_integer_to_ascii_string_next
	ldr	r1, =0
	strb	r1, [r3], #-1
@		pop	r0-r12	@ bug/future
@		return
@	sub	r3, r3, #1
	ldr	r0, =beginning_of_temporary_string_2
	ldr	r2, =beginning_of_temporary_string_1
BCD_integer_to_ascii_string_next_next:
	ldrb	r1, [r3], #-1
	strb	r1, [r0], #1
	cmp	r3, r2
	bHS	BCD_integer_to_ascii_string_next_next
	ldr	r1, =0
	strb	r1, [r0]
	pop	r0-r12	@ bug/future
	return

@ ============================================================================

draw_a_border_around_the_screen:
	push	r0-r12	@ bug/future: this could be more efficient; have to check the macros below
	@ top line:
	draw_line_imm	display_first_x, display_last_x, (display_first_y+top_border_gap), (display_first_y+top_border_gap), 0b111111000, 0b000000000	@ first displayed row
	delay_imm	55
	@ bottom line:
	draw_line_imm	display_first_x, display_last_x, display_last_y, display_last_y, 0b111111000, 0b000000000	@ last displayed row
	delay_imm	55
	@ left line:
	draw_line_imm	display_first_x, display_first_x, (display_first_y+top_border_gap), display_last_y, 0b111111000, 0b000000000	@ first displayed column
	delay_imm	55
	@ right line:
	draw_line_imm	display_last_x, display_last_x, (display_first_y+top_border_gap), display_last_y, 0b111111000, 0b000000000	@ last displayed column
	delay_imm	55
	pop	r0-r12	@ bug/future: this could be more efficient; have to check the macros below
	return

@ ============================================================================

blank_function:
	push	r0-r12	@ bug/future
	pop	r0-r12	@ bug/future
	return

