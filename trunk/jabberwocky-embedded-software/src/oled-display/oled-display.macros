@ copyright 2007 mza (Matthew Andrew)
@ started 2007-09-19 (talk like a pirate day)

@ This program is free software; you can redistribute it and/or modify
@ it under the terms of the GNU General Public License as published by
@ the Free Software Foundation; either version 3 of the License, or
@ (at your option) any later version.

@ This program is distributed in the hope that it will be useful,
@ but WITHOUT ANY WARRANTY; without even the implied warranty of
@ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@ GNU General Public License for more details.

@ You should have received a copy of the GNU General Public License
@ along with this program; if not, write to the Free Software
@ Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA
@ or visit http://www.fsf.org/

@ ============================================================================
@ other display-related stuff
@ ============================================================================

@.macro	set_color
@.endm

.macro	erase_old_and_redraw_new_integer	address_of_old_value, address_of_new_value, x_position, y_position, type_of_value, color=green
	ldr	r0, =\x_position
	ldr	r1, =position_of_center_of_current_character_x
	strb	r0, [r1]
	ldr	r0, =\y_position
	ldr	r1, =position_of_center_of_current_character_y
	strb	r0, [r1]
	ldr	r1, =integer_to_render
	ldr	r0, =\address_of_old_value
	.ifc	\type_of_value,byte
		ldrb	r0, [r0]
	.endif
	.ifc	\type_of_value,hword
		ldrh	r0, [r0]
	.endif
	.ifc	\type_of_value,word
		ldr	r0, [r0]
	.endif
	call	convert_hexadecimal_to_BCD
	str	r0, [r1]
	ldr	r0, =font_color
	ldr	r1, =background_color
	ldr	r1, [r1]
@		ldr	r1, =red
	str	r1, [r0]
	call	render_a_BCD_integer
	ldr	r1, =integer_to_render
	ldr	r0, =\address_of_new_value
	.ifc	\type_of_value,byte
		ldrb	r0, [r0]
	.endif
	.ifc	\type_of_value,hword
		ldrh	r0, [r0]
	.endif
	.ifc	\type_of_value,word
		ldr	r0, [r0]
	.endif
	call	convert_hexadecimal_to_BCD
	str	r0, [r1]
	ldr	r0, =font_color
	ldr	r1, =\color
	str	r1, [r0]
	ldr	r0, =\x_position
	ldr	r1, =position_of_center_of_current_character_x
	strb	r0, [r1]
	call	render_a_BCD_integer
.endm

.macro	erase_old_and_redraw_new_BCD_integer	address_of_old_value, address_of_new_value, x_position, y_position, type_of_value, color=green
	ldr	r0, =\x_position
	ldr	r1, =position_of_center_of_current_character_x
	strb	r0, [r1]
	ldr	r0, =\y_position
	ldr	r1, =position_of_center_of_current_character_y
	strb	r0, [r1]
	ldr	r0, =integer_to_render
	ldr	r1, =\address_of_old_value
	.ifc	\type_of_value,byte
		ldrb	r1, [r1]
	.endif
	.ifc	\type_of_value,hword
		ldrh	r1, [r1]
	.endif
	.ifc	\type_of_value,word
		ldr	r1, [r1]
	.endif
	str	r1, [r0]
	ldr	r0, =font_color
	ldr	r1, =background_color
	ldr	r1, [r1]
@		ldr	r1, =red
	str	r1, [r0]
	call	render_a_BCD_integer
	ldr	r0, =integer_to_render
	ldr	r1, =\address_of_new_value
	.ifc	\type_of_value,byte
		ldrb	r1, [r1]
	.endif
	.ifc	\type_of_value,hword
		ldrh	r1, [r1]
	.endif
	.ifc	\type_of_value,word
		ldr	r1, [r1]
	.endif
	str	r1, [r0]
	ldr	r0, =font_color
	ldr	r1, =\color
	str	r1, [r0]
	ldr	r0, =\x_position
	ldr	r1, =position_of_center_of_current_character_x
	strb	r0, [r1]
	call	render_a_BCD_integer
.endm

.macro	erase_old_and_redraw_new_hexadecimal_integer	address_of_old_value, address_of_new_value, x_position, y_position, type_of_value, color=green
	ldr	r0, =\x_position
	ldr	r1, =position_of_center_of_current_character_x
	strb	r0, [r1]
	ldr	r0, =\y_position
	ldr	r1, =position_of_center_of_current_character_y
	strb	r0, [r1]
	ldr	r0, =integer_to_render
	ldr	r1, =\address_of_old_value
	.ifc	\type_of_value,byte
		ldrb	r1, [r1]
	.endif
	.ifc	\type_of_value,hword
		ldrh	r1, [r1]
	.endif
	.ifc	\type_of_value,word
		ldr	r1, [r1]
	.endif
	str	r1, [r0]
	ldr	r0, =font_color
	ldr	r1, =background_color
	ldr	r1, [r1]
@		ldr	r1, =red
	str	r1, [r0]
	call	render_a_hexadecimal_integer
	ldr	r0, =integer_to_render
	ldr	r1, =\address_of_new_value
	.ifc	\type_of_value,byte
		ldrb	r1, [r1]
	.endif
	.ifc	\type_of_value,hword
		ldrh	r1, [r1]
	.endif
	.ifc	\type_of_value,word
		ldr	r1, [r1]
	.endif
	str	r1, [r0]
	ldr	r0, =font_color
	ldr	r1, =\color
	str	r1, [r0]
	ldr	r0, =\x_position
	ldr	r1, =position_of_center_of_current_character_x
	strb	r0, [r1]
	call	render_a_hexadecimal_integer
.endm

.macro	reset__display_needs_update
	push	r0-r1
	ldr	r0, =display_needs_update
	ldr	r1, =0
	strb	r1, [r0]
	pop	r0-r1
.endm

.macro	if_display_does_not_need_update_then_jump_to	address
	push	r0
	ldr	r0, =display_needs_update
	ldrb	r0, [r0]
	cmp	r0, #1
	pop	r0
	bNE	\address
.endm

